#!/bin/bash

# HTTPS and SSL checker
# Large portions of this script adapted and refactored from:
# https://github.com/bobbyiliev/bash-ssl-checker-tool

#### VARIABLES ########

# Colors
green='\e[32m'
blue='\e[34m'
clear='\e[0m'
orange='\e[33m'
red='\e[31m'

# Miscellaneous
today=$(date +%F)
expires=$(echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -dates | grep 'notAfter' | sed 's/notAfter=//')
#echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -dates

#### END VARIABLES ####

#### FUNCTIONS ########

# TODO: Add the ability to check sub-pages/URLs not just domain names.

# Color Functions

ColorGreen(){
    echo -ne $green$1$clear
}
ColorBlue(){
    echo -ne $blue$1$clear
}
ColorRed(){
    echo -ne $red$1$clear
}
ColorOrange(){
    echo -ne $orange$1$clear
}

# Usage
usage () {
    # Display usage information 
    echo -ne "Usage:
$(ColorGreen 'sslcheck domain.com')
"
    exit 1
    # TODO: Flesh out this function.
}

# Validation
check_openssl () {
    # Check for openssl command 
    if ! [ -x "$(command -v openssl)" ] ; then
        echo "The openssl command is required! Please install it and then try again"
        exit 1
    fi
}

validate_input () {
    # Validate input.  Checks if valid domain name.
    if [[ $1 ]]; then
	      host $1 > /dev/null
	      if [ $? -eq 0 ]; then
		        echo -ne "The $(ColorGreen $1 ) domain name seems valid

"
	      else
		        echo -ne "Could not resolve the $(ColorGreen ${1}) domain name...

"
		        exit 1
	      fi
    fi
}


# SSL information
# TODO: Add intermediate certificate chain check. 
# Example: https://www.sslshopper.com/ssl-checker.html#hostname=shakteeman.in 
ssl_issued_for_host () {
    # Get hostname ssl certificate is issued for and display it
    echo -ne "$(ColorRed '#') $(ColorGreen 'The SSL certificate has been issued for:')"
	  echo ''
	  echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -subject | sed 's/subject=/Domain: /'
	  #echo | openssl s_client -servername www.$1 -connect www.$1:443 2>/dev/null | openssl x509 -noout -subject
	  echo '----'
}

ssl_expires_in_days () {
    # Get expiration date, calculate days until expiration, and display it 
	  echo ''
    echo -ne "$(ColorRed '#') $(ColorGreen 'The SSL certificate expires in:')"
	  echo ''
	  echo $(( ( $(date -ud "$expires" +'%s') - $(date -ud "$today" +'%s') )/60/60/24 )) days
	  echo '----'
}

ssl_dates_issued_for () {
    # Get date issued on and expiration date, and display both 
	  echo ''
    echo -ne "$(ColorRed '#') $(ColorGreen 'Dates:')"
	  echo ''
	  echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -dates | sed 's/notAfter=/Expires On: /' | sed 's/notBefore=/Issued On: /'
	  echo '----'
}

ssl_issued_by () {
    # Get ssl certificate issuer and display it
	  echo ''
    echo -ne "$(ColorRed '#') $(ColorGreen 'The certificate has been issued by:')"
	  echo ''
	  echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -issuer | sed 's/issuer=/Issuer: /'
	  echo '----'
}

ssl_cert_fingerprint () {
    # Get encryption fingerprint and display it
	  echo ''
    echo -ne "$(ColorRed '#') $(ColorGreen 'Fingerprint:')"
	  echo ''
	  echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -fingerprint
	  echo '----'

	  #echo ''
    #echo -ne "$(ColorRed '#') $(ColorGreen 'Decode')"
	  #echo ''
	  #echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -text
	  #echo '#################'
}

# Server configuration
tls_version () {
    # Negotiate highest TLS version supported and display it
	  echo ''
    echo -ne "$(ColorRed '#') $(ColorGreen 'TLS supported:')"
	  echo ''
	  nmap --script ssl-enum-ciphers -p 443 $1 | grep ':' | grep -i tls
	  echo '----'
    # TODO: re-write this so that it doesn't depend on 'nmap' since that is
    # very slow on jumpstation.
}

check_force_https () {
    # Check if webserver is forcing https or not and display result
    echo '' 
    echo -e "$(ColorRed '#') $(ColorGreen 'Force HTTPS:')"

    # Initialize local variable with a value if redirecting to HTTPS
    local https=$(curl -v --head --user-agent Mozilla/5.0 $1 2>&1 | grep https)

    # Test if value is non-empty. If empty not forcing HTTPS.
    if [[ -n $https ]]; then
        echo -e "Webserver is forcing HTTPS" 
    else
        echo -e "Webserver is $(ColorRed 'not') forcing HTTPS"
    fi

    echo '----'
}

# Mixed content
check_mixed_content () {
    # Check if website is serving mixed content and display results.
    echo ''
    echo -e "$(ColorRed '#') $(ColorGreen 'Mixed Content:')"

    mkdir -p ~/tmp # Make tmp directory if not already there

    # Get everything needed to mirror/serve the main page locally and write 
    # the calls to each resource to a log file.
    wget -E -H -k -K --page-requisites --no-verbose --delete-after --user-agent="Mozilla/5.0" -e robots=off -o ~/tmp/ssl_check_log $1
    
    # Check the log created above for http/https resource calls and assign
    # to local variables.
    local http=$(grep 'http:' ~/tmp/ssl_check_log)
    local https=$(grep 'https:' ~/tmp/ssl_check_log)

    # TODO: parse .css and .js files for 'http' calls that could cause mixed content issues

    # If http variable is non-empty then there is mixed content. Display the
    # mixed content. If not using HTTPS say that, else no mixed content. 
    if [[ -n $http && -n $https ]]; then
        echo -e "Website has $(ColorRed 'Mixed Content')"
        echo -e "$http"
        echo ''
        echo -e "* This is a rudimentary check for mixed content, javascript needs to be executed"
        echo -e "(among other things) for a more complete diagnostic."
    elif [[ -z $https || -z $http ]]; then
		echo -e "Failed to fetch a page."
    elif [[ -z $https ]]; then
        echo -e "Website isn't using HTTPS."
    else
        echo -e "Website has no Mixed Content"
        echo ''
        echo -e "* This is a rudimentary check for mixed content, javascript needs to be executed"
        echo -e "(among other things) for a more complete diagnostic."
    fi

    # Clean-up logfiles
    #rm -f ~/tmp/ssl_check_log
}

#### END FUNCTIONS #### 

#### MAIN #############

# Make sure that openssl is installed
check_openssl

# Get opts and run functions
case $1 in
    -h | help | "")
        # Usage 
        usage
        ;;
    *)
        validate_input $1
        ssl_issued_for_host $1
        check_force_https $1
        ssl_expires_in_days
        ssl_dates_issued_for $1
        ssl_issued_by $1
        #tls_version $1
        ssl_cert_fingerprint $1
        check_mixed_content $1
        ;;
esac

#### END MAIN #########

exit 0
